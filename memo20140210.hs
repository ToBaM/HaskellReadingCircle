-- --------------------
-- # 1.5 リスト内包表記 (P.15-)
-- --------------------
-- リストのフィルタリング、変換、組み合わせを行う
-- 数学でいう_集合の内包的記法_に近い

-- { 2x | x ∈ N, x<= 10 }
[x*2 | x <- [1..10]]
take 10 [2,4..]

-- [ 出力 | 述語1, 述語2, ...]
-- "述語"は"条件"ともいう
[x*2 | x <- [1..10], x*2 >= 12]
[x | x <- [50..100], x `mod` 7 == 3]

let boomBangs xs = [if x < 10 then "BOOM!" else "BANG!" | x <- xs, odd x]
boomBangs [7..13] -- すべての述語がTrueと評価された要素がリストに含まれる

-- 同上
[x | x <- [10..20], x /= 13, x /= 15, x /= 19]

-- 複数のリストから値を取り出す
[x+y | x <- [1,2,3], y <- [10,100,1000]]
[x*y | x <- [2,5,10], y <- [8,10,11]]
[x*y | x <- [2,5,10], y <- [8,10,11], x*y > 50]

let nouns = ["hobo", "frog", "pope"]
let adjectives = ["lazy", "grouchy", "scheming"]
[adjective ++ " " ++ noun | adjective <- adjectives, noun <- nouns]

-- 関数定義に使う
let length' xs = sum [1 | _ <- xs] -- "_"は取り出した値を使い捨てるための変数名
length [1..5]
length' [1..5]

-- 文字列操作
let removeNonUppercase st = [c | c <- st, c `elem` ['A'..'Z']]
removeNonUppercase "Hahaha! Ahahaha!"
removeNonUppercase "IdontLIKEFROGS"

-- 入れ子にする
let xxs = [[1,3,5,2,3,1,2,4,5],[1,2,3,4,5,6,7,8,9],[1,2,4,2,1,6,3,1,3,2,3,6]]
[ [x | x <- xs, even x] | xs <- xxs]

-- --------------------
-- # 1.6 タプル (P.18-)
-- --------------------
-- 複数の違う型の要素を格納して、１つの値として扱う
--     タプルの特徴（リストとの違い）
--     1. ヘテロ
--     2. サイズ固定
(1, 3)
(3, 'a', "hello")
(50, 50.4, "hello", 'b')

-- ## タプルを使う
-- 例）二次元ベクトルで図形の頂点を表す
-- * リスト
[[1,2],[8,11],[4,5]] -- リストのリスト
[[1,2],[8,11,5],[4,5]] -- 期待以外の要素数が許されてしまう
-- * タプル
[(1,2),(8,11),(4,5)] -- ペアのリスト
[(1,2),(8,11,5),(4,5)] -- 要素の型が違うのでエラー

-- 型の違いも許されない
[(1,2),("One",2)]
[(1,'a'), (2,"b")]

-- 例）人の名前と年齢を表す
("Christopher", "Walken", 55)

-- ## ペアを使う
-- * fst
fst (8,11)
fst ("Wow", False)
-- * snd
snd (8,11)
snd ("Wow", False)
-- * zip
zip [1,2,3,4,5] [5,5,5,5,5]
zip [1..5] ["one", "tow", "three", "four", "five"]
zip [5,3,2,6,7,2,5,4,6,6] ["im", "a", "turtle"]
zip [1..] ["apple", "orange", "cherry", "mango"]

-- ## 直角三角形を見つける
-- * 3辺の長さはすべて整数
-- * 各辺の長さは10以下
-- * 周囲の長さは24に等しい

-- 10以下の3整数の組み合わせ
let triples = [ (a,b,c) | c <- [1..10], a <- [1..10], b <- [1..10] ]
triples
-- ピタゴラスの定理
let rightTriangles = [ (a,b,c) | c <- [1..10], a <- [1..c], b <- [1..a], a^2 + b^2 == c^2]
rightTriangles
-- 周囲の長さ24
let rightTriangles' = [ (a,b,c) | c <- [1..10], a <- [1..c], b <- [1..a], a^2 + b^2 == c^2, a+b+c == 24]
rightTriangles'